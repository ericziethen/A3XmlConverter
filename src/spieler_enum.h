#pragma once

#include <string>
#include "misc_lib.h"

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// ENUMS ///////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

#define SPIELER_NO_FAEHIGKEIT_STRING "Keine"
#define POSITIVE_FAEHIGKEITEN_PREFIX	"+"
#define NEGATIVE_FAEHIGKEITEN_PREFIX	"-"
#define SPIELER_POS_VAL_MAX_STRING

typedef enum 
{
	SPIELER_ENUM_UNKNOWN,
	SPIELER_ENUM_FUSSBALLINLAENDER,
	SPIELER_ENUM_HAAR,
	SPIELER_ENUM_BART,
	SPIELER_ENUM_NATIONALSPIELER_UND_RUECKTRITT,
	SPIELER_ENUM_EIGENSCHAFTEN,
	SPIELER_ENUM_TORWARTFAEHIGKEITEN,
	SPIELER_ENUM_SPIELERFAEHIGKEITEN,
	SPIELER_ENUM_CHARAKTER,
	SPIELER_ENUM_HAUTFARBE,
	SPIELER_ENUM_HAARFARBE,
	SPIELER_ENUM_POSITION,
	SPIELER_ENUM_FUSS,
	SPIELER_ENUM_TALENT,
	SPIELER_ENUM_GESUNDHEIT,
	SPIELER_ENUM_PUBLIKUM,
	NO_OF_SPIELER_ENUM_TYPES
} SPIELER_ENUM_TYPE;

typedef enum
{
	// Special Enum to Represent Boolean Lookup Values when Converting Boolean
	SPIELER_BOOLEAN_UNKNOWN,
	SPIELER_BOOLEAN_HAT_KUENSTLERNAHME,
	SPIELER_BOOLEAN_KAPITAEN_RUECKTRITT,
	SPIELER_BOOLEAN_IST_NATIONALSPIELER,
	SPIELER_BOOLEAN_NATIONALSPIELER_RUECKTRITT,
	SPIELER_BOOLEAN_BART_UNRASIERT,
	SPIELER_BOOLEAN_BART_BART,
	SPIELER_BOOLEAN_BART_SCHNURBART,
	SPIELER_BOOLEAN_BART_ZIEGENBART,
	SPIELER_BOOLEAN_FUSSBALLINLAENDER,
	NO_OF_SPIELER_BOOLEAN_TYPES
} SPIELER_BOOLEAN_TYPE;

typedef enum 
{
	SPIELER_HAAR_UNKNOWN,
	SPIELER_HAAR_EXTREM_KURZ,
	SPIELER_HAAR_KURZ,
	SPIELER_HAAR_WUSCHELKOPF,
	SPIELER_HAAR_LANG,
	NO_OF_SPIELER_HAAR_TYPES
} SPIELER_HAAR_TYPE;

typedef enum 
{
	SPIELER_BART_UNKNOWN,
	SPIELER_BART_KEIN,
	SPIELER_BART_UNRASIERT,
	SPIELER_BART_BART,
	SPIELER_BART_SCHNURBART,
	SPIELER_BART_ZIEGENBART,
	NO_OF_SPIELER_BART_TYPES
} SPIELER_BART_TYPE;

typedef enum 
{
	SPIELER_NATIONALSPIELER_UND_RUECKTRITT_UNKNOWN,
	SPIELER_NATIONALSPIELER_UND_RUECKTRITT_NEIN,
	SPIELER_NATIONALSPIELER_UND_RUECKTRITT_IST_NATIONALSPIELER,
	SPIELER_NATIONALSPIELER_UND_RUECKTRITT_RUECKTRITT,
	NO_OF_SPIELER_NATIONALSPIELER_UND_RUECKTRITT_TYPES,
} SPIELER_NATIONALSPIELER_UND_RUECKTRITT_TYPE;

typedef enum 
{
	SPIELER_FUSSBALLINLAENDER_UNKNOWN,
	SPIELER_FUSSBALLINLAENDER_NEIN,
	SPIELER_FUSSBALLINLAENDER_JA,
	NO_OF_SPIELER_FUSSBALLINLAENDER_TYPES,
} SPIELER_FUSSBALLINLAENDER_TYPE;

typedef enum
{
	SPIELER_EIGENSCHAFTEN_UNKNOWN,
	SPIELER_EIGENSCHAFTEN_KEINE,
	SPIELER_EIGENSCHAFTEN_KAEMPFERNATUR,
	SPIELER_EIGENSCHAFTEN_TRAININGSWELTMEISTER,
	SPIELER_EIGENSCHAFTEN_TRAININGSFAULERSPIELER,
	SPIELER_EIGENSCHAFTEN_TRETER,
	SPIELER_EIGENSCHAFTEN_FAIRERSPIELER,
	SPIELER_EIGENSCHAFTEN_MIMOSE,
	SPIELER_EIGENSCHAFTEN_SCHLITZOHR,
	SPIELER_EIGENSCHAFTEN_SPEZIALIST,
	SPIELER_EIGENSCHAFTEN_ALLROUNDER,
	SPIELER_EIGENSCHAFTEN_FLEXIBLERSPIELER,
	SPIELER_EIGENSCHAFTEN_SCHIRILIEBLING,
	SPIELER_EIGENSCHAFTEN_HEIMSPIELER,
	SPIELER_EIGENSCHAFTEN_SCHOENWETTERFUSSBALLER,
	SPIELER_EIGENSCHAFTEN_JOKER,
	SPIELER_EIGENSCHAFTEN_EGOIST,
	SPIELER_EIGENSCHAFTEN_BRUDERLEICHTFUSS,
	NO_OF_SPIELER_EIGENSCHAFTEN_TYPES
} SPIELER_EIGENSCHAFTEN_TYPE;

typedef enum
{
	SPIELER_TORWARTFAEHIGKEITEN_UNKNOWN,
	SPIELER_TORWARTFAEHIGKEITEN_KEINE,
	SPIELER_TORWARTFAEHIGKEITEN_ELFMETERTOETER,
	SPIELER_TORWARTFAEHIGKEITEN_STARKE_REFLEXE,
	SPIELER_TORWARTFAEHIGKEITEN_HERAUSLAUFEN,
	SPIELER_TORWARTFAEHIGKEITEN_FLANKEN,
	SPIELER_TORWARTFAEHIGKEITEN_FAUSTEN,
	SPIELER_TORWARTFAEHIGKEITEN_BALLSICHERHEIT,
	SPIELER_TORWARTFAEHIGKEITEN_SCHNELLIGKEIT,
	SPIELER_TORWARTFAEHIGKEITEN_WEITE_ABSCHLAEGE,
	SPIELER_TORWARTFAEHIGKEITEN_WEITE_ABWUERFE,
	NO_OF_SPIELER_TORWARTFAEHIGKEITEN_TYPES
} SPIELER_TORWARTFAEHIGKEITEN_TYPE;

typedef enum
{
	SPIELER_SPIELERFAEHIGKEITEN_UNKNOWN,
	SPIELER_SPIELERFAEHIGKEITEN_KEINE,
	SPIELER_SPIELERFAEHIGKEITEN_KOPFBALL,
	SPIELER_SPIELERFAEHIGKEITEN_ZWEIKAMPF,
	SPIELER_SPIELERFAEHIGKEITEN_SCHNELLIGKEIT,
	SPIELER_SPIELERFAEHIGKEITEN_SCHUSSKRAFT,
	SPIELER_SPIELERFAEHIGKEITEN_ELFMETER,
	SPIELER_SPIELERFAEHIGKEITEN_FREISTOESSE,
	SPIELER_SPIELERFAEHIGKEITEN_FLANKEN,
	SPIELER_SPIELERFAEHIGKEITEN_TORINSTINKT,
	SPIELER_SPIELERFAEHIGKEITEN_LAUFSTAREKE,
	SPIELER_SPIELERFAEHIGKEITEN_TECHNICK,
	SPIELER_SPIELERFAEHIGKEITEN_BALLZAUBERER,
	SPIELER_SPIELERFAEHIGKEITEN_SPIELMACHER,
	SPIELER_SPIELERFAEHIGKEITEN_VIERERKETTE,
	SPIELER_SPIELERFAEHIGKEITEN_SPIELUEBERSICHT,
	SPIELER_SPIELERFAEHIGKEITEN_BALL_HALTEN,
	SPIELER_SPIELERFAEHIGKEITEN_DRIBBLING,
	NO_OF_SPIELER_SPIELERFAEHIGKEITEN_TYPES
} SPIELER_SPIELERFAEHIGKEITEN_TYPE;

typedef enum
{
	SPIELER_CHARAKTER_UNKNOWN,
	SPIELER_CHARAKTER_KEINE,
	SPIELER_CHARAKTER_FUEHRUNGSPERSON,
	SPIELER_CHARAKTER_HITZKOPF,
	SPIELER_CHARAKTER_FROHNATUR,
	SPIELER_CHARAKTER_MANNOHNENERVEN,
	SPIELER_CHARAKTER_NERVENBUENDEL,
	SPIELER_CHARAKTER_PHLEGMATIKER,
	SPIELER_CHARAKTER_GELDGEIER,
	SPIELER_CHARAKTER_VEREINSANHAENGER,
	SPIELER_CHARAKTER_MUSTERPROFI,
	SPIELER_CHARAKTER_SKANDALNUDEL,
	SPIELER_CHARAKTER_SENSIBELCHEN,
	SPIELER_CHARAKTER_STARALUEREN,
	SPIELER_CHARAKTER_TEENIE_STAR,
	SPIELER_CHARAKTER_UNRUHESTIFTER,
	SPIELER_CHARAKTER_LEBERWURST,
	SPIELER_CHARAKTER_INTEGRATIONSFIGUR,
	NO_OF_SPIELER_CHARAKTER_TYPES
} SPIELER_CHARAKTER_TYPE;

typedef enum
{
	SPIELER_HAUTFARBE_UNKNOWN,
	SPIELER_HAUTFARBE_HELL,
	SPIELER_HAUTFARBE_DUNKEL,
	SPIELER_HAUTFARBE_SCHWARZ,
	SPIELER_HAUTFARBE_ASIATISCH,
	NO_OF_SPIELER_HAUTFARBE_TYPES
} SPIELER_HAUTFARBE_TYPE;
	
typedef enum
{
	SPIELER_HAARFARBE_UNKNOWN,
	SPIELER_HAARFARBE_HELLBLOND,
	SPIELER_HAARFARBE_BLOND,
	SPIELER_HAARFARBE_BRAUN,
	SPIELER_HAARFARBE_ROT,
	SPIELER_HAARFARBE_SCHWARZ,
	SPIELER_HAARFARBE_GLATZE,
	SPIELER_HAARFARBE_GRAU,
	NO_OF_SPIELER_HAARFARBE_TYPES
} SPIELER_HAARFARBE_TYPE;

typedef enum
{
	SPIELER_POSITION_UNKNOWN,
	SPIELER_POSITION_KEINE,
	SPIELER_POSITION_TORWART,
	SPIELER_POSITION_LIBERO,
	SPIELER_POSITION_INNENVERTEIDIGER,
	SPIELER_POSITION_LINKERVERTEIDIGER,
	SPIELER_POSITION_RECHTERVERTEIDIGER,
	SPIELER_POSITION_DEFENSIVESMITTELFELD,
	SPIELER_POSITION_LINKESMITTELFELD,
	SPIELER_POSITION_RECHTESMITTELFELD,
	SPIELER_POSITION_OFFENSIVESMITTELFELD,
	SPIELER_POSITION_STUERMER,
	NO_OF_SPIELER_POSITION_TYPES
} SPIELER_POSITION_TYPE;

typedef enum
{
	SPIELER_FUSS_UNKNOWN,
	SPIELER_FUSS_LINKS,
	SPIELER_FUSS_RECHTS,
	SPIELER_FUSS_BEIDE,
	NO_OF_SPIELER_FUSS_TYPES
} SPIELER_FUSS_TYPE;
	
typedef enum
{
	SPIELER_TALENT_UNKNOWN,
	SPIELER_TALENT_MEGATALENT,
	SPIELER_TALENT_TALENT,
	SPIELER_TALENT_NORMAL,
	SPIELER_TALENT_WENIGBEGABT,
	SPIELER_TALENT_ZWEILINKEFUESSE,
	NO_OF_SPIELER_TALENT_TYPES
} SPIELER_TALENT_TYPE;

typedef enum
{
	SPIELER_GESUNDHEIT_UNKNOWN,
	SPIELER_GESUNDHEIT_NORMAL,
	SPIELER_GESUNDHEIT_ROBUST,
	SPIELER_GESUNDHEIT_ANFAELLIG,
	SPIELER_GESUNDHEIT_KNIEPROBLEME,
	SPIELER_GESUNDHEIT_SCHNELLWIEDERFIT,
	SPIELER_GESUNDHEIT_DAUERTBISWIEDERFIT,
	SPIELER_GESUNDHEIT_WEHLEIDIG,
	NO_OF_SPIELER_GESUNDHEIT_TYPES
} SPIELER_GESUNDHEIT_TYPE;

typedef enum
{
	SPIELER_PUBLIKUM_UNKNOWN,
	SPIELER_PUBLIKUM_NORMAL,
	SPIELER_PUBLIKUM_LIEBLING,
	SPIELER_PUBLIKUM_HASSFIGUR,
	NO_OF_SPIELER_PUBLIKUM_TYPES
} SPIELER_PUBLIKUM_TYPE;

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// FUNCTION FORWARD DECLARATIONS ///////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

ENUM_VALUE_LIST& GetSpielerEnumValueList (SPIELER_ENUM_TYPE, ENUM_VALUE_LIST&);
int GetSpielerEnumValue (int, ENUM_VALUE_SIDE_TYPE, int);
std::string GetNameFromSpielerEnumType (SPIELER_ENUM_TYPE);
std::string GetNameFromSpielerHaarType (int);
std::string GetNameFromSpielerBartType (int);
std::string GetNameFromSpielerNationalspielerUndRuecktrittType (int);
std::string GetNameFromSpielerEigenschaftenType (int);
std::string GetNameFromSpielerHautfarbeType (int);
std::string GetNameFromSpielerHaarfarbeType (int);
std::string GetNameFromSpielerPositionType (int);
std::string GetNameFromSpielerFussType (int);
std::string GetNameFromSpielerTalentType (int);
std::string GetNameFromSpielerGesundheitType (int);
std::string GetNameFromSpielerPublikumType (int);
std::string GetNameFromSpielerFussballinlaenderType (int);
std::string GetNameFromSpielerCharakterType (int);

// Faehigkeiten special functions
std::string GetPositiveNameFromSpielerTorwartFaehigkeitenType (int);
std::string GetNegativeNameFromSpielerTorwartFaehigkeitenType (int);
std::string GetPositiveNameFromSpielerFaehigkeitenType (int);
std::string GetNegativeNameFromSpielerFaehigkeitenType (int);

static std::string GetNameFromSpielerTorwartFaehigkeitenType (SPIELER_TORWARTFAEHIGKEITEN_TYPE, const std::string&);
static std::string GetNameFromSpielerFaehigkeitenType (SPIELER_SPIELERFAEHIGKEITEN_TYPE, const std::string&);
static std::string GetNameFromSpielerTorwartFaehigkeitenTypeUnPrefixed (SPIELER_TORWARTFAEHIGKEITEN_TYPE);
static std::string GetNameFromSpielerFaehigkeitenTypeUnPrefixed (SPIELER_SPIELERFAEHIGKEITEN_TYPE);
static std::string GetNameForSpielerKeineFaehigkeit ();

int GetValueFromSpielerBooleanType (SPIELER_BOOLEAN_TYPE);
std::string GetNameFromSpielerBooleanType (SPIELER_BOOLEAN_TYPE);


/*
void SPIELER_TEST ();
*/
